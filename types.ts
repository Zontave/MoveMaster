
export interface User {
  id: string;
  email: string; // Or username
  name?: string;
}

export enum PackageType {
  BOX = "Box",
  TRUNK = "Trunk",
  BAG = "Bag",
  BULK = "Bulk",
}

export enum LocationStatus {
  DEPARTURE = "At Departure Address",
  TRANSIT = "In Transit",
  DESTINATION = "At Destination Address",
}

export interface PackageContentItem {
  id: string;
  name: string;
  quantity: number;
  photo?: string; // URL or base64 string of the photo
}

export interface Package {
  id: string; // Unique autogenerated name like "box12"
  moveId: string;
  type: PackageType;
  contentType: string; // e.g., "Kitchenware", "Books", "Clothing"
  roomOfOrigin: string; // e.g., "Kitchen", "Bedroom", "Living Room"
  dimensions: {
    length: number; // cm
    width: number; // cm
    height: number; // cm
  };
  locationStatus: LocationStatus;
  contents: PackageContentItem[];
  qrCodeValue: string; // Typically the package ID or a URL to its details
  auditLog: AuditLogEntry[];
  createdAt: string; // ISO Date string
  updatedAt: string; // ISO Date string
}

export interface MoveUserPermission {
  userId: string; // or email
  permission: "read" | "write";
}

export interface PickupLocation {
  id: string;
  address: string;
  notes?: string;
}

export interface Move {
  id: string;
  userId: string; // ID of the user who created the move
  name: string;
  departureAddress: string;
  arrivalAddress: string;
  pickupLocations: PickupLocation[];
  sharedWith: MoveUserPermission[]; // Mocked
  packagesCount?: number; // Calculated field
  volumeMoved?: number; // Calculated field (m³)
  totalVolume?: number; // Calculated field (m³)
  progress?: number; // Calculated field (%)
  createdAt: string; // ISO Date string
  updatedAt: string; // ISO Date string
  auditLog: AuditLogEntry[];
}

export interface AuditLogEntry {
  timestamp: string; // ISO Date string
  action: string;
  userId?: string; // ID of user performing action (mocked)
  details?: string;
}

export type NotificationType = "success" | "error" | "info" | "warning";

export interface Notification {
  id: string;
  message: string;
  type: NotificationType;
}

// For Gemini Service
export interface ContentSuggestionRequest {
  roomOfOrigin: string;
  packageType: PackageType;
  existingContent?: string;
}

export interface SuggestedItem {
  name: string;
  reason?: string;
}
